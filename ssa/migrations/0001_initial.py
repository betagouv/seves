# Generated by Django 5.1.7 on 2025-04-04 14:08

import django.db.models.deletion
import ssa.models.validators
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("core", "0027_auto_20250327_1433"),
    ]

    operations = [
        migrations.CreateModel(
            name="EvenementProduit",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "etat",
                    models.CharField(
                        choices=[
                            ("brouillon", "Brouillon"),
                            ("en_cours", "En cours"),
                            ("cloture", "Clôturé"),
                        ],
                        default="brouillon",
                        max_length=100,
                        verbose_name="État de l'événement",
                    ),
                ),
                ("numero_annee", models.IntegerField(verbose_name="Année")),
                ("numero_evenement", models.IntegerField(verbose_name="Numéro")),
                (
                    "date_creation",
                    models.DateTimeField(auto_now_add=True, verbose_name="Date de création"),
                ),
                (
                    "numero_rasff",
                    models.CharField(
                        blank=True,
                        max_length=9,
                        validators=[ssa.models.validators.validate_numero_rasff],
                        verbose_name="N° RASFF/ACC",
                    ),
                ),
                (
                    "type_evenement",
                    models.CharField(
                        choices=[
                            ("alerte_produit_nationale", "Alerte produit nationale"),
                            ("alerte_produit_locale", "Alerte produit locale"),
                            ("non_alerte", "Non alerte"),
                            ("alerte_produit_ue", "Alerte produit UE/INT (RASFF)"),
                            ("non_alerte_ue", "Non alerte UE/INT (ACC)"),
                            ("investigation_cas_humain", "Investigation cas humains"),
                        ],
                        max_length=100,
                        verbose_name="Type d'événement",
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("autocontrole", "Autocontrôle"),
                            ("prelevement_pspc", "Prélèvement PSPC"),
                            ("prelevement_sivep", "Prélèvemeent SIVEP"),
                            (
                                "autre_prelevement_officiel",
                                "Autre prélèvement officiel",
                            ),
                            ("autre_constat_officiel", "Autre constat officiel"),
                            ("suspicion_tiac", "Suspicion de TIAC"),
                            (
                                "investigation_cas_humains",
                                "Investigation de cas humains",
                            ),
                            ("do_listeriose", "DO Listériose"),
                            ("cas_groupes", "Cas groupés"),
                            ("tiacs", "TIACS"),
                            ("autre", "Autre"),
                        ],
                        max_length=100,
                        verbose_name="Source",
                    ),
                ),
                (
                    "cerfa_recu",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("oui_produit", "Oui produit"),
                            ("oui_environnement", "Oui environnement"),
                            ("non", "Non"),
                        ],
                        max_length=100,
                        verbose_name="Cerfa reçu du professionnel ?",
                    ),
                ),
                (
                    "description",
                    models.TextField(verbose_name="Description de l'événement"),
                ),
                (
                    "denomination",
                    models.CharField(max_length=255, verbose_name="Dénomination"),
                ),
                (
                    "marque",
                    models.CharField(blank=True, max_length=255, verbose_name="Marque"),
                ),
                ("lots", models.TextField(blank=True, verbose_name="Lots, DLC/DDM")),
                (
                    "description_complementaire",
                    models.TextField(blank=True, verbose_name="Description complémentaire"),
                ),
                (
                    "temperature_conservation",
                    models.CharField(
                        choices=[
                            ("refrigere", "Réfrigéré"),
                            ("surgele", "Surgelé"),
                            ("temperature_ambiante", "Température ambiante"),
                        ],
                        max_length=100,
                        verbose_name="Température de conservation",
                    ),
                ),
                (
                    "quantification",
                    models.FloatField(
                        blank=True,
                        null=True,
                        verbose_name="Quantification maximale à l'origine de l'événement",
                    ),
                ),
                (
                    "quantification_unite",
                    models.CharField(
                        blank=True,
                        choices=[("/100g", "/100g")],
                        max_length=100,
                        verbose_name="Unité",
                    ),
                ),
                ("evaluation", models.TextField(blank=True, verbose_name="Évaluation")),
                (
                    "produit_pret_a_manger",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("oui", "Oui"),
                            ("non", "Non"),
                            ("non_applicable", "Non applicable"),
                        ],
                        max_length=100,
                        verbose_name="Produit Prêt à manger (PAM)",
                    ),
                ),
                (
                    "reference_souches",
                    models.CharField(blank=True, max_length=255, verbose_name="Références souches"),
                ),
                (
                    "reference_clusters",
                    models.CharField(blank=True, max_length=255, verbose_name="Références clusters"),
                ),
                (
                    "actions_engagees",
                    models.CharField(
                        choices=[
                            ("pas_de_mesure", "Pas de mesure de retrait ou rappel"),
                            (
                                "retrait_marche",
                                "Retrait du marché (sans information des consommateurs)",
                            ),
                            ("retrait_rappel", "Retrait et rappel"),
                            (
                                "retrait_rappel_communique_presse",
                                "Retrait et rappel avec communiqué de presse",
                            ),
                        ],
                        max_length=100,
                        verbose_name="Action engagées",
                    ),
                ),
                (
                    "createur",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="core.structure",
                        verbose_name="Structure créatrice",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]

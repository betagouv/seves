# Generated by Django 5.1.8 on 2025-05-27 09:14

from django.db import migrations
from django.db.models import Q, Exists, OuterRef


REGION_STRUCTURE_MAPPING = {
    "Auvergne-Rhône-Alpes": "DRAAF-AUVERGNE-RHONE-ALPES",
    "Bourgogne-Franche-Comté": "DRAAF-BOURGOGNE-FRANCHE-COMTE",
    "Bretagne": "DRAAF-BRETAGNE",
    "Centre-Val de Loire": "DRAAF-CENTRE-VAL-DE-LOIRE",
    "Corse": "DRAAF-CORSE",
    "Grand Est": "DRAAF-GRAND-EST",
    "Hauts-de-France": "DRAAF-HAUTS-DE-FRANCE",
    "Île-de-France": "DRAAF-ILE-DE-FRANCE",
    "Normandie": "DRAAF-NORMANDIE",
    "Nouvelle-Aquitaine": "DRAAF-NOUVELLE-AQUITAINE",
    "Occitanie": "DRAAF-OCCITANIE",
    "Pays de la Loire": "DRAAF-PAYS-DE-LA-LOIRE",
    "Provence-Alpes-Côte d'Azur": "DRAAF-PACA",
    "Guadeloupe": "DAAF971",
    "Martinique": "DAAF972",
    "Guyane": "DAAF973",
    "La Réunion": "DAAF974",
    "Mayotte": "DAAF976",
}


def update_createur_import_historique(apps, schema_editor):
    Evenement = apps.get_model("sv", "Evenement")
    Lieu = apps.get_model("sv", "Lieu")
    Structure = apps.get_model("core", "Structure")

    # événements de l'import de historique dont le createur est MUS
    # ayant au moins un lieu avec département (donc avec région)
    condition_historique = Q(numero_annee__lt=2025) | Q(numero_annee=2025, numero_evenement__lte=11)
    condition_mus = Q(createur__niveau2="MUS")
    lieux_avec_dept = Lieu.objects.filter(fiche_detection__evenement=OuterRef("pk"), departement__isnull=False)
    evenements_with_region = Evenement._base_manager.filter(
        condition_historique, condition_mus, Exists(lieux_avec_dept)
    )

    for evenement in evenements_with_region:
        first_lieu_with_dept = Lieu.objects.filter(
            fiche_detection__evenement=evenement, departement__isnull=False
        ).first()
        region_nom = first_lieu_with_dept.departement.region.nom
        structure_name = REGION_STRUCTURE_MAPPING.get(region_nom)
        if structure_name is None:
            raise Exception(f"Région non mappée: {region_nom} pour l'événement {evenement.id}")
        structure = Structure.objects.get(niveau2=structure_name)
        evenement.createur = structure
        evenement.save()


def reverse_update_createur(apps, schema_editor):
    Evenement = apps.get_model("sv", "Evenement")
    Structure = apps.get_model("core", "Structure")
    mus_structure = Structure.objects.get(niveau2="MUS")
    condition_historique = Q(numero_annee__lt=2025) | Q(numero_annee=2025, numero_evenement__lte=11)
    condition_non_mus = ~Q(createur__niveau2="MUS")
    evenements_modifies = Evenement.objects.filter(condition_historique, condition_non_mus)
    for evenement in evenements_modifies:
        evenement.createur = mus_structure
        evenement.save()


class Migration(migrations.Migration):
    dependencies = [
        ("sv", "0099_update_access_from_contacts"),
    ]

    operations = [
        migrations.RunPython(update_createur_import_historique, reverse_update_createur),
    ]

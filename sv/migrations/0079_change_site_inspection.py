# Generated by Django 5.1.6 on 2025-03-06 10:08

from django.db import migrations

TO_RENAME = [
    ("Champ", "Champ (culture, pâturage)"),
    ("Jardin privé", "Jardins privés (plein air)"),
    ("Site public", "Sites publics (plein air)"),
    ("Espace protégé", "Espaces réglementés pour la préservation de l'environnement (plein air)"),
    ("Plateforme logistique", "Plateforme logistique de transit, stockage ou revente de bois d'emballage (plein air)"),
    ("Batiment privé", "Site privé (environnement fermé) autre qu'une serre"),
    ("Batiment public", "Site public (environnement fermé) autre qu'une serre"),
    ("Peuplement classé", "[ANCIENNE VALEUR] Peuplement classé"),
    ("Friches", "[ANCIENNE VALEUR] Friches"),
    ("Site de stockage de bois", "[ANCIENNE VALEUR] Site de stockage de bois"),
    ("Autre (à préciser dans le fil de suivi)", "[ANCIENNE VALEUR] Autre"),
    ("Sans objet", "[ANCIENNE VALEUR] Sans objet"),
    ("Jardinerie", "[ANCIENNE VALEUR] Jardinerie"),
    ("Verger", "Verger/vigne"),
]

TO_ADD = [
    "Plantes sauvages dans des aires non protégées (plein air)",
    "Jardinerie (plein air)",
    "Réseau d'irrigation ou de drainage",
    "Zone humide",
    "Industrie du bois (plein air)",
    "Aéroport, port, route, voie ferrée (plein air)",
    "Points d'entrée (plein air)",
    "Zones à risque (plein air)",
    "Marchés, détaillants, magasins, grossistes (plein air)",
    "Zones urbaines (plein air)",
    "Emballages en bois, palettes en bois (plein air)",
    "Contrôles en circulation (plein air)",
    "Autre (plein air)",
    "Installations couvertes et closes de transit, stockage ou revente de bois d'emballage",
    "Jardinerie (environnement fermé)",
    "Industrie du bois (environnement fermé)",
    "Aéroport, port, gare (environnement fermé)",
    "Zones à risque (environnement fermé)",
    "Usine d'emballage, entrepôt (environnement fermé)",
    "Grossistes, marchés, détaillants (environnement fermé)",
    "Autre (environnement fermé)",
]


def rename_site_inspection(apps, schema_editor):
    SiteInspection = apps.get_model("sv", "SiteInspection")
    Lieu = apps.get_model("sv", "Lieu")

    for old, new in TO_RENAME:
        site = SiteInspection.objects.get(nom=old)
        site.nom = new
        site.save()

    for site in TO_ADD:
        SiteInspection.objects.create(nom=site)

    new_site = SiteInspection.objects.get(nom="Verger/vigne")
    Lieu.objects.filter(site_inspection__nom__in=["Vignoble", "Verger à graine"]).update(site_inspection=new_site)
    SiteInspection.objects.filter(nom__in=["Vignoble", "Verger à graine"]).delete()


def reverse_site_inspection(apps, schema_editor):
    SiteInspection = apps.get_model("sv", "SiteInspection")

    for old, new in TO_RENAME:
        site = SiteInspection.objects.get(nom=new)
        site.nom = old
        site.save()

    for site in TO_ADD:
        SiteInspection.objects.get(nom=site).delete()


class Migration(migrations.Migration):
    dependencies = [
        ("sv", "0078_update_ornq_libelle"),
    ]

    operations = [migrations.RunPython(rename_site_inspection, reverse_site_inspection)]
